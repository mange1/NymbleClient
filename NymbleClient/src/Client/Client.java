/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Client.java
 *
 *
 */
package Client;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import NymbleManager.WatchDirectory;
//import PM.PseudonymManager;

/**
 *
 * @author Inbo
 */
public class Client extends javax.swing.JFrame implements Runnable {

    Socket socket, socket1;
    String ServerName="192.168.0.101";
    PrintWriter printWriter;
    private String serverAddress;// = "\\\\kp-26052011\\F\\hemant";
    Thread check;
    static Boolean disconnect = false;
    WatchDirectory watDir;
    BufferedReader bufferedReader;
    String GlobalMsg = "";
    InetAddress inetAddress;
    int key;
    String serverStr, NymbleTicket;
    Runtime rt;
    PrintWriter printWriter1;
    BufferedReader br = null;
    String ProcessID;
    static String myPseudoName = "";

    /** Creates new form Client */
    public Client() {
        initComponents();
        initialize();
    }

    public void initialize() {

        try {
            rt = Runtime.getRuntime();
            check = new Thread(this);
            btnNymble.setEnabled(false);
            jButton1.setEnabled(false);
            btnconnect.setEnabled(true);
            jButton2.setEnabled(false);
            server1.setEnabled(true);
            server2.setEnabled(true);
            server3.setEnabled(true);
            server4.setEnabled(true);


        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        btnPM = new javax.swing.JButton();
        btnNymble = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        server1 = new javax.swing.JRadioButton();
        server2 = new javax.swing.JRadioButton();
        server3 = new javax.swing.JRadioButton();
        server4 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        btnconnect = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPM.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPM.setText("Connect to Pseudonym Manager for Registration");
        btnPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPMActionPerformed(evt);
            }
        });

        btnNymble.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNymble.setText("Connect to Nymble Manager");
        btnNymble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNymbleActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setEnabled(false);

        buttonGroup1.add(server1);
        server1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        server1.setText("Server1");
        server1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                server1ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(server2);
        server2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        server2.setText("Server2");
        server2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                server2ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(server3);
        server3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        server3.setText("Server3");
        server3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                server3ItemStateChanged(evt);
            }
        });

        buttonGroup1.add(server4);
        server4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        server4.setText("Server4");
        server4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                server4ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Select the Server to Connect");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(server1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(server2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(server3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(server4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(server1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(server2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(server3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(server4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnconnect.setText("Connect");
        btnconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconnectActionPerformed(evt);
            }
        });

        jButton2.setText("Disconnect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Reset");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnconnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnNymble, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPM, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(btnPM)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(btnNymble)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(btnconnect))
                .addGap(251, 251, 251))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPMActionPerformed
        // TODO add your handling code here:
        try {
            inetAddress = InetAddress.getLocalHost();
            
            socket = new Socket(ServerName, 2828);
            PrintWriter out= new PrintWriter(socket.getOutputStream());
            
            String PCName = inetAddress.getHostName();
            System.out.println(""+PCName);
            out.write(PCName);
            out.flush();
            
            printWriter = new PrintWriter(socket.getOutputStream());
            JOptionPane.showMessageDialog(btnPM, "Successfully Registered with Pseudonym Manager!!!");
            btnPM.setEnabled(false);

        } catch (ConnectException ec) {
            JOptionPane.showMessageDialog(this, "Unable to Connect to PM Server");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnPMActionPerformed

    private void btnNymbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNymbleActionPerformed
        // TODO add your handling code here:
        try {
            socket1 = new Socket(ServerName, 9898);

            JOptionPane.showMessageDialog(btnNymble, "Client Connected to Nymble Manager!!!");
            btnNymble.setEnabled(false);
            btnconnect.setEnabled(true);
        } catch (ConnectException ec) {
            JOptionPane.showMessageDialog(this, "Unable to Connect to Nymble Server");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnNymbleActionPerformed

    private void btnconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconnectActionPerformed
//        PrintWriter printWriter1 = null;
//        try {


//            //Nymble Manager will Provide the Ticket
//            BufferedReader br = new BufferedReader(new InputStreamReader(socket1.getInputStream()));
//            String str = br.readLine();//get the Ticket
//
//            NymbleTicket = str;
//            System.out.println("Nym ticket in client " + NymbleTicket);
//
//            //gets the Server Location
//            int index = str.indexOf("-");
//            String Addr = str.substring(index + 1, str.length());
//            System.out.println("Server Address in client " + Addr);
//            serverAddress = Addr;
//
//            //Verification will be done by Checking list the Server have
//            String status;
//            status = NymbleTicket.substring(0, NymbleTicket.indexOf("-") - 1);
//            if (status.equalsIgnoreCase("no")) {
//                JOptionPane.showMessageDialog(this, "You Have Been Blocked to Access this Particular Server!!!", "Information", JOptionPane.INFORMATION_MESSAGE);
//            } else {
//                Process pr = rt.exec("explorer " + serverAddress);

//        server1.setEnabled(false);
//        server2.setEnabled(false);
//        server3.setEnabled(false);
//        server4.setEnabled(false);
        check.start();
////            }
//        } catch (IOException ex) {
//            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnconnectActionPerformed

    private void server1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_server1ItemStateChanged
        // TODO add your handling code here:
        //serverAddress = "\\\\kp-26052011\\F\\hemant";
        serverStr = "1";
        btnNymble.setEnabled(true);
    }//GEN-LAST:event_server1ItemStateChanged

    private void server2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_server2ItemStateChanged
        // TODO add your handling code here:
        //serverAddress = "\\\\kp-26052011\\F\\hemant1";
        serverStr = "2";
        btnNymble.setEnabled(true);
    }//GEN-LAST:event_server2ItemStateChanged

    private void server3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_server3ItemStateChanged
        // TODO add your handling code here:
        serverStr = "3";
        btnNymble.setEnabled(true);
    }//GEN-LAST:event_server3ItemStateChanged

    private void server4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_server4ItemStateChanged
        // TODO add your handling code here:
        serverStr = "4";
        btnNymble.setEnabled(true);
    }//GEN-LAST:event_server4ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            socket.close();
            socket1.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        disconnect = true;
        WatchFolder.stop = true;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        initialize();
        jPanel1.validate();
        this.validate();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void watch() {
        try {
//            boolean recursive = false;
            //String path = System.getProperty("user.home");
////            PathMatcher matcher =
////                    FileSystems.getDefault().getPathMatcher("glob:*.*");
////            System.err.println("" + matcher.toString());
////            Path dir = Paths.get(serverAddress);

            //watDir = new WatchDirectory(dir, recursive);
            //watDir.processEvents();

            System.out.println("Inside Watch");
            new WatchFolder(serverAddress);

            //System.err.println("msg====== " + GlobalMsg);


        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Client().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNymble;
    private javax.swing.JButton btnPM;
    private javax.swing.JButton btnconnect;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton server1;
    private javax.swing.JRadioButton server2;
    private javax.swing.JRadioButton server3;
    private javax.swing.JRadioButton server4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            String status;
//            System.err.println("Thread Started");
//
//            System.out.println("watch");            

            //Nymble Manager will Provide the Ticket
            br = new BufferedReader(new InputStreamReader(socket1.getInputStream()));
            printWriter1 = new PrintWriter(socket1.getOutputStream());
            printWriter1.println("server-" + serverStr);
            printWriter1.flush();
            jButton2.setEnabled(true);
            jButton1.setEnabled(true);
            System.out.println("in Client Server request send " + serverStr);

            String str = "";
            while (true) {
                str = br.readLine();//get the Ticket
                if (!(str.equals(""))) {
                    break;
                }
            }
            System.out.println("In whileeeee str== " + str);
            if (!(str.equals(""))) {
                NymbleTicket = str;
                System.out.println("Nym ticket in client " + NymbleTicket);

                //gets the Server Location
                int index = str.indexOf("-");
                String Addr = str.substring(index + 1, str.length());
                System.out.println("Server Address in client " + Addr);
                serverAddress = Addr;

                //Verification will be done by Checking list the Server have

                status = NymbleTicket.substring(0, NymbleTicket.indexOf("-"));
                System.out.println("status in client " + status);
                if (status.equalsIgnoreCase("no")) {
                    JOptionPane.showMessageDialog(this, "You Have Been Blocked to Access this Particular Server!!!", "Information", JOptionPane.INFORMATION_MESSAGE);
                    check.stop();
                    WatchFolder.stop = true;
                } else {
                    if (serverAddress.equalsIgnoreCase("server2")) {
                        
                        new OpenURI("http://"+ServerName+":8080/NymbleClientLogin/index.jsp");
                        //new OpenURI("http://localhost:8888/NymbleClientLogin/index.jsp"); for apache tomcat
                    } else {

                        Process pr = rt.exec("explorer " + serverAddress);
                        watch();
                    }
                    //check.start();
                    //
                    
                }

                //watch();

                if (WatchFolder.stop) {
                    //when IP Blocked inform PM
                    PrintWriter printWritr1 = new PrintWriter(socket.getOutputStream());
                    printWritr1.println(inetAddress.getHostAddress() + "-server" + serverStr + "-Blocked");
                    printWritr1.flush();
                    JOptionPane.showMessageDialog(this, "User with IP " + inetAddress.getHostAddress() + " has been Blocked Permanently for this Server!!!");
                    //Process pr = rt.exec("taskkill /IM explorer.exe");
                    check.stop();

                    //check = new Thread(this);
                    //System.err.println("Thread Intialized again!!!");
//                    socket.close();
//                    socket1.close();
//                    this.dispose();
//                    new Client();
                }
            }
            //msg = watDir.Event();

//                bufferedReader = new BufferedReader(new InputStreamReader(socket1.getInputStream()));
//                msg = bufferedReader.readLine();
//                System.err.println("msg== " + msg);
//                if (msg.equalsIgnoreCase("ENTRY_DELETE")) {
//                    System.err.println("Entry Deleted");
//                    disconnect = true;
//                }
            //stopWhileDisconnected();
            //Thread.sleep(100);
            // }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
